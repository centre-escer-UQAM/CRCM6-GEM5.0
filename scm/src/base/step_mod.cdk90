!COMP_ARCH=intel-2016.1.156 ; -add=-C -g -traceback -ftrapuv
!---------------------------------- LICENCE BEGIN -------------------------------
! SCM - Library of kernel routines for the RPN single column model
! Copyright (C) 1990-2017 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

module step_mod

  implicit none

  private

#include <arch_specific.hf>

  ! Module parameters
  integer, parameter, private :: STDOUT=6               !Unit for stdout
  integer, parameter, private :: STDERR=0               !Unit for stderr
  integer, parameter, private :: LONG_CHAR=1024         !Long character string
  integer, parameter, private :: SHORT_CHAR=16          !Short character string

  ! Module variables
  real(kind=8) :: step_dt_8                             !Timestep (s)
  character(len=SHORT_CHAR) :: step_runstrt_s           !Date of run start ('YYYYMMDD.HHMMSS')
  character(len=SHORT_CHAR) :: fcst_end_s               !Length of integration
  character(len=SHORT_CHAR) :: fcst_nesdt_s             !Time between driving updates
  logical :: initialized=.false.                        !Initialization status

  ! Export API (parameters)
  integer, parameter, public :: STEP_OK=0               !Function completed without errors
  integer, parameter, public :: STEP_ERROR=-1           !Function encountered error(s)

  ! Export API (subprograms)
  public :: step_init                                   !Initialize the step retrieval package
  public :: step_get                                    !Retrieve information from the namelist

  ! Module interfaces
  interface step_get
     module procedure step_get_char
     module procedure step_get_int
     module procedure step_get_r8
  end interface

contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  function step_init(F_file) result(F_status)
    ! Read namelist from specified file.

    implicit none

    ! Input variables
    character(len=*), intent(in) :: F_file              !Settings file

    ! Output variables
    integer :: F_status                                 !Return status for function

    ! Internal variables
    integer :: iun,istat

    ! External subprograms
    integer, external :: fnom,fclos

    ! Namelist definition
    namelist /step/ fcst_end_s,step_dt_8,step_runstrt_s,fcst_nesdt_s

    ! Set return status
    F_status = STEP_ERROR

    ! Initializations
    step_runstrt_s = '20090427.000000'
    step_dt_8 = 60D0
    fcst_end_s = ''
    fcst_nesdt_s = ''

    ! Read namelist from settings file
    iun = 0
    if (fnom(iun,trim(F_file),'SEQ+OLD',0) /= 0) then
       write(STDERR,*) 'step::step_init cannot associate unit with '//trim(F_file)
       return
    endif
    rewind(iun)
    read(iun,nml=step,err=100)
    if (fclos(iun) /= 0) then
       write(STDERR,*) 'step::step_init cannot release unit for '//trim(F_file)
       return
    endif

    ! Set success status and return
    initialized = .true.
99  F_status = STEP_OK
    return

    ! Error encountered during namelist read
100 istat = fclos(iun)
    write(STDERR,*) 'step::step_init error reading step namelist from settings file '//trim(F_file)
    return

  end function step_init

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  function step_get_char(F_key,F_value) result(F_status)
    ! Retrieve an namelist value
    
    implicit none

#include <clib_interface.cdk>

    ! Input variables
    character(len=*), intent(in) :: F_key               !Name of entry to retrieve
    
    ! Output variables
    character(len=*), intent(out) :: F_value            !Value of entry
    integer :: F_status                                 !Return status for function

    ! Internal variables
    character(len=LONG_CHAR) :: key

    ! Set return status
    F_status = STEP_ERROR

    ! Check for intialization
    if (.not.initialized) then
       write(STDERR,*) 'step::step_get_char called before step::step_init'
       return
    endif

    ! Return requested value
    key = F_key
    if (clib_tolower(key) /= CLIB_OK) then
       write(STDERR,*) 'step::step_get_char unable to lower-case key '//trim(F_key)
       return
    endif
    select case(key)
    case ('step_runstrt_s')
       F_value = step_runstrt_s
    case DEFAULT
       write(STDERR,*) 'step::step_get_char called with unknown key '//trim(F_key)
       return
    end select

    ! Set success status and return
    F_status = STEP_OK
    return
  end function step_get_char

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  function step_get_int(F_key,F_value) result(F_status)
    use timestr_mod, only: timestr2step,timestr2sec
    ! Retrieve an namelist value
    
    implicit none

#include <clib_interface.cdk>

    ! Input variables
    character(len=*), intent(in) :: F_key               !Name of entry to retrieve
    
    ! Output variables
    integer, intent(out) :: F_value                     !Value of entry
    integer :: F_status                                 !Return status for function

    ! Internal variables
    real :: rnesdt
    character(len=LONG_CHAR) :: key

    ! Set return status
    F_status = STEP_ERROR

    ! Check for intialization
    if (.not.initialized) then
       write(STDERR,*) 'step::step_get_int called before step::step_init'
       return
    endif

    ! Return requested value
    key = F_key
    if (clib_tolower(key) /= CLIB_OK) then
       write(STDERR,*) 'step::step_get_int unable to lower-case key '//trim(F_key)
       return
    endif
    select case(key)
    case ('step_total')
       if (timestr2step(F_value,fcst_end_s,step_dt_8) < 0) then
          write(STDERR,*) 'step::step_get_int unable to lower-case key '//trim(F_key)
          return
       endif
    case ('step_nesdt')
       if (timestr2sec(rnesdt,fcst_nesdt_s,step_dt_8) < 0) then
          write(STDERR,*) 'step::step_get_int unable to lower-case key '//trim(F_key)
          return
       endif
       F_value = nint(rnesdt)
    case DEFAULT
       write(STDERR,*) 'step::step_get_int called with unknown key '//trim(F_key)
       return
    end select

    ! Set success status and return
    F_status = STEP_OK
    return
  end function step_get_int

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  function step_get_r8(F_key,F_value) result(F_status)
    ! Retrieve an namelist value
    
    implicit none

#include <clib_interface.cdk>

    ! Input variables
    character(len=*), intent(in) :: F_key               !Name of entry to retrieve
    
    ! Output variables
    real(kind=8), intent(out) :: F_value                !Value of entry
    integer :: F_status                                 !Return status for function

    ! Internal variables
    character(len=LONG_CHAR) :: key

    ! Set return status
    F_status = STEP_ERROR

    ! Check for intialization
    if (.not.initialized) then
       write(STDERR,*) 'step::step_get_r8 called before step::step_init'
       return
    endif

    ! Return requested value
    key = F_key
    if (clib_tolower(key) /= CLIB_OK) then
       write(STDERR,*) 'step::step_get_r8 unable to lower-case key '//trim(F_key)
       return
    endif
    select case(key)
    case ('step_dt_8')
       F_value = step_dt_8
    case DEFAULT
       write(STDERR,*) 'step::step_get_r8 called with unknown key '//trim(F_key)
       return
    end select

    ! Set success status and return
    F_status = STEP_OK
    return
  end function step_get_r8

end module step_mod
