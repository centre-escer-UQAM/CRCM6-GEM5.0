printf "\n=====>  Runmod.cfg starts: `date` ###########\n\n"
# Do not rerun setup for restarts
if [[ ${Runmod} != '000' ]] ; then export TASK_SETUP_NOEXEC=1 ; fi

# Create IAU inputs only if available
iau_upload=${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_\${gem_domain}/IAUREP

# Resart file is targeted only if available and at the first iteration Runmod=000
if [[ ${Runmod} == '000' ]] ; then
  rst_upload=${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_\${gem_domain}/restart_file
else
  rst_upload=/dev/null/restart_file
  /bin/rm -f ${SEQ_WORKBASE}/${SEQ_CONTAINER}/Runmod+000/input/cfg_*/restart.tar
fi

# Link to uploaded user data if available
mod_analysis=${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_\${gem_domain}/analysis
mod_inrep=${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_\${gem_domain}/model_inrep
mod_upload=${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_\${gem_domain}/MODEL_input

# Link to uploaded outcfg.out file if available
outcfg_upload=${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/shared/outcfg.out

# Construct release or user executable names
if [ "$MOD_GEM_bindir" == "release" -o \
     "$MOD_GEM_bindir" == "RELEASE" ] ; then
  BINMOD=$(which maingemdm_REL_${BASE_ARCH}.Abs)
else
  BINMOD=${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/shared/ATM_MOD/maingemdm_${BASE_ARCH}.Abs
fi

if [ ! -e ${MOD_GEM_ozone} ] ; then
  MOD_GEM_ozone=${AFSISIO}/datafiles/constants/${MOD_GEM_ozone}
fi

# Create an architecture-specific optimized environment
if [[ -r ${ENVFILE} ]] ; then cat ${ENVFILE}; . ${ENVFILE} ; fi

###########################################################################
# <input type="loop" var="gem_domain" start="${DOMAIN_start}" end="${DOMAIN_end}">
# cfg_${gem_domain}/ANALYSIS            ${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_${gem_domain}/ANALYSIS
# cfg_${gem_domain}/MODEL_ANALYSIS     `eval f1=${mod_analysis} ; if [[ -e ${f1} ]] ; then echo ${f1} ; else echo "'<no value>'" ;fi`
# cfg_${gem_domain}/MODEL_INREP        `eval f1=${mod_inrep}    ; if [[ -e ${f1} ]] ; then echo ${f1} ; else echo "'<no value>'" ;fi`
# cfg_${gem_domain}/MODEL_INPUT        `eval f1=${mod_upload}   ; if [[ -e ${f1} ]] ; then echo ${f1}/\* ; else echo "'<no value>'" ; fi` ${ATM_MODEL_DFILES}/datafiles/modeldata/*
# cfg_${gem_domain}/model_settings.nml  ${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_${gem_domain}/gem_settings.nml
# cfg_${gem_domain}/restart.tar        `eval f1=${rst_upload}   ; if [[ -e ${f1} ]] ; then echo ${f1} ; else echo "'<no value>'" ;fi`
# cfg_${gem_domain}/GEOPHY              ${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/shared/GEOPHY
# cfg_${gem_domain}/CLIMATO             ${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/shared/CLIMATO 
# cfg_${gem_domain}/output_settings    `eval f1=${outcfg_upload}; if [[ -e ${f1} ]] ; then echo ${f1} ; else echo "'<no value>'" ;fi`
# cfg_${gem_domain}/IAUREP             `eval f1=${iau_upload}   ; if [[ -e ${f1} ]] ; then echo ${f1} ; else echo "'<no value>'" ;fi`
# cfg_${gem_domain}/physics_input_table ${SEQ_WORKBASE}/${SEQ_CONTAINER}/StageIN${SEQ_CONTAINER_LOOP_EXT}/output/cfg_${gem_domain}/physics_in_table
# cfg_${gem_domain}/ozone_clim.fst      ${MOD_GEM_ozone}
# cfg_${gem_domain}/rad_table.fst       ${MOD_GEM_radtab}
# cfg_${gem_domain}/constantes          ${MOD_GEM_const}
# cfg_${gem_domain}/CACHE	             ${MOD_GEM_cache}
# </input>
############################################################################
# <executables>
# Um_checkfs.ksh        Um_checkfs.ksh
# Um_cmclog.ksh	      Um_cmclog.ksh
# setnml                setnml
# r.mpirun              r.run_in_parallel
# ATM_MOD.Abs           ${BINMOD}
# UM_RUNMOD             Um_runmod.ksh
# UM_MODEL              Um_model.ksh
# gem_monitor_output    gem_monitor_output
# gem_monitor_end       gem_monitor_end
# launch_sortie.ksh     Um_process_output.ksh
# </executables>
############################################################################
# <output>
# </output>
############################################################################

printf "\n=====>  Runmod.cfg ends: `date` ###########\n\n"
