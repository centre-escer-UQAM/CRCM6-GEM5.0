#!/bin/ksh

## rm -rf mydir ; mkdir mydir && cd mydir && git init && ../_bin/gemimportall.ksh

squash=--squash
reposbase2=git@gitlab.science.gc.ca:MIG
# reposbase=/users/dor/armn/sch/Data/ords/big_tmp/_GitDepots_bare
reposbase=${reposbase2}
mygit=git
# mygit=echo
# set -x

TMPDIR2=${TMPDIR}/$$
mkdir -p ${TMPDIR2}

if [[ ! -d .git/ ]] ; then
   cat 1>&2 <<EOF
ERROR: not a git repository.
       Try to do "git init"
EOF
   exit 1
fi

for item in _bin _share ; do
   if [[ -d ../${item} && ! -d ${item} ]] ; then
      cp -R ../${item}/ .
   fi
done
for item in README.md .gitignore ; do
   if [[ -f ../${item} && ! -f ${item} ]] ; then
      cp  ../${item} .
   fi
done
for item in _bin/.setenv.dot _share/Makefile.usr.mk _share/Makefile.user.root.mk _share/README.md ; do
   if [[ -f ${item} && ! -f ${item##*/} ]] ; then
      ln -s ${item}  .
   fi
done

${mygit} add .
${mygit} commit -a -m 'Initial commit'

newtags="$(${mygit} tag | tr '\n' ' ')"
for item in $(cat ./_share/gemversions.txt); do
   branch=${item%%:*}
   comps=${item#*:}
   tag=${comps%%:*}
   tag=${branch%%_*}_${tag##*_}
   echo "==== ${tag} (${branch}) ${comps}"

   ## Skip already imported versions
   if [[ "x$(${mygit} tag | grep ${tag})" != "x" ]] ; then
      echo "Skipping ${tag}, already imported"
      continue
   fi

   if [[ "x$(${mygit} branch | grep ${branch})" == "x" ]] ; then
      ${mygit} checkout -b ${branch}
   else
      ${mygit} checkout ${branch}
   fi

   echo > COMPONENTS
   echo > DEPENDENCIES
   for comp1 in $(echo ${comps} | tr ':' ' ') ; do
      compname=${comp1%%/*}
      comptag=${comp1#*/}
      remoteurl=${reposbase2}/${compname}.git
      if [[ "${compname}" == "python-rpn" ]] ; then
         compname=rpnpy
      fi
      remotename=${compname}
      echo "${compname}" >> COMPONENTS
      echo "${compname}=${remoteurl}/${comptag}" >> DEPENDENCIES
   done
   ${mygit} add COMPONENTS DEPENDENCIES
   ${mygit} commit -a -m "add COMPONENTS, DEPENDENCIES for ${tag}"

   for comp1 in $(echo ${comps} | tr ':' ' ') ; do
      compname=${comp1%%/*}
      comptag=${comp1#*/}
      remoteurl=${reposbase}/${compname}.git
      if [[ "${compname}" == "python-rpn" ]] ; then
         compname=rpnpy
      fi
      remotename=${compname}
      cmd=add; [[ -d ${compname} ]] && cmd=pull || true

      echo "---- ${tag} (${branch}) ${compname} ${comptag}"

      if [[ "x$(${mygit} remote -v | grep ${remotename})" == "x" ]] ; then
         ${mygit} remote add ${remotename} ${remoteurl} #--no-tags
         ${mygit} fetch --tags ${remotename}
      fi

      tagfile=${TMPDIR2}/${branch}_${compname}.txt
      logfile=${TMPDIR2}/${branch}_${compname}_${comptag}.log
      echo "subtree_pull: tag=${comptag}; url=${remoteurl}; dir=${compname}" > ${logfile}
      if [[ -f ${tagfile} ]] ; then
         comptag0="$(cat ${tagfile})"
         if [[ "${comptag0}" != "${comptag}" ]] ; then
            echo >> ${logfile}
            ${mygit} log --format=medium --date=iso ${comptag0}..${comptag} >> ${logfile}
         fi
      fi
      echo ${comptag} > ${tagfile}

      ${mygit} subtree ${cmd} -P ${compname} ${squash} ${remotename} ${comptag} -m "$(cat ${logfile})"
   done
   newtags="${newtags} ${tag}"
   ${mygit} tag -f ${tag}
done

## Cleanup branches
for item in $(cat ./_share/gemversions.txt); do
   comps=${item#*:}
   for comp1 in $(echo ${comps} | tr ':' ' ') ; do
      remotename=${comp1%%/*}
      if [[ "${remotename}" == "python-rpn" ]] ; then
         remotename=rpnpy
      fi
      ${mygit} remote remove ${remotename} 2>/dev/null || true
   done
done

## Cleanup tags
for tag1 in $(${mygit} tag); do
   if [[ "x$(echo ${newtags} | grep ${tag1})" == "x" ]] ; then
      ${mygit} tag -d  ${tag1}
   fi
done

## Garbage collection
${mygit} reflog expire --expire-unreachable=now --all
${mygit} gc --prune=now
