printf "\n=====>  GemVerif_module container.cfg starts: `date` ###########\n\n"

export GEM_DEV_SUITE=${GEM_DEV_SUITE:-${SEQ_EXP_HOME}/..}
export PATH=${GEM_DEV_SUITE}/gem/bin/${ORDENV_PLAT}:${GEM_DEV_SUITE}/gem/bin:${PATH}
export PYTHONPATH=${GEM_DEV_SUITE}/gem/lib:${GEM_DEV_SUITE}/gem/bin:${PYTHONPATH}

USER_AFSISIO=${AFSISIO}
default_bundle_location=/fs/ssm/eccc/mrd/rpn/MIG/GEM
if [[ ! -e ${default_bundle_location} ]] ; then default_bundle_location=GEM ; fi
GEM_bundle_location=${GEM_bundle_location:-${default_bundle_location}}

# Obtain GEM package and check compatibility
found_error=0
if [[ -z "${ATM_MODEL_VERSION}" ]] ; then
  if [[ -n "${GEM_version}" ]] ; then
    . r.load.dot ${GEM_bundle_location}/${GEM_version} ${GEM_update}
  else
    found_error=1
    message="Error: A value for GEM_version is required if no GEM is loaded in the environment"
  fi
else
  if [[ -n "${GEM_version}" && $(normpath.py -p ${ATM_MODEL_BNDL##*GEM/}) != $(normpath.py -p ${GEM_version}) ]] ; then
      found_error=1
      message="Error: GEM bundle ${ATM_MODEL_BNDL} loaded in environment, but ${GEM_version} requested in configuration"
  fi
fi

if [[ ${found_error} -gt 0 ]] ; then
  echo ${message} >&2
  nodelogger -n ${SEQ_NODE} -s abort -d ${SEQ_DATE} ${SEQ_LOOP_ARGS} -m "${message}"
  exit 1
fi

echo $PATH | tr ":" "\n"

export AFSISIO=${USER_AFSISIO:-${ATM_MODEL_DFILES}}
expname=${GEM_exp:-$(basename ${SEQ_EXP_HOME})}
ENVFILE=${GEM_addenv:-${modelutils}/include/${BASE_ARCH}/Um_envbatch.dot} #host-specific environment definitions
export SETMEX=-ex


printf "\n=====>  GemVerif_module container.cfg ends: `date` ###########\n\n"
