#!/usr/bin/env ksh

# Retrieve command line arguments
arguments=$*
usage="Usage: $0 EXP_NAME [options]"
DESC="Add a new experiment/config from the RI/sample-configs/other's experiment/configs"

# Check for a GEM development environment
if [[ -z "${GEM_DEV_SUITE}" ]] ; then
   echo "ERROR: No active development environment:  use gemdev.dot to create one"
   exit 1
fi

# Process command line arguments
eval $(rpy.cclargs \
   -D ":" \
   --desc   "${DESC}" \
   --positional "EXP_NAME" \
   ${0##*/} \
   -f      "0"         "1"     "[Force overwrite of existing directory]" \
   -v      "0"         "1"     "[Verbose output]" \
   -copy   "base"      "base"  "[Existing experiment to copy]" \
   -ln     "0"         "1"     "[Link back experiment config in \${GEM_DEV_SUITE}/gem/GEM_cfgs_NAME]" \
   -tests  "0"         "1"     "[Import GemVerifRef instead of the RI]" \
   -list   "0"         "1"     "[List avail. configs in \${gem}/share/cfgs/]" \
   -i      "0"         "1"     "[Only import the config for interactive use (implies -ln)]" \
   ++ ${arguments})
explist=$*

if [[ "x${list}" != "x0" ]] ; then
   cat <<EOF
## List of avail. configs names in \${gem}/share/cfgs/ to use with "devadd -copy":
$(cd ${gem}/share/cfgs ; ls -1d [a-zA-Z0-9]*)
EOF
   exit 0
fi

if [[ "x$(echo ${copy} | cut -d" " -f1)" != "x${copy}" ]] ; then
   echo "ERROR: Can only provide one copy dir: ${copy}" 1>&2
   exit 1
fi

if [[ "x${copy}" != "x" && "x${explist}" == "x" ]] ; then
   explist=${copy##*/}
   explist=${explist#GEM_cfgs_}
   explist=${explist#GEM_cfg_}
   explist=${explist#cfg_}
else
   if [[ $# -lt 1 ]] ; then echo ${usage} 1>&2 ; return 1 ; fi
fi
if [[ ${i} == 1 ]] ; then
   [[ x"${ln}" == x"0" ]] && ln=1 || true
   tests=0
fi

# Check for a valid suite
if [[ ! -d ${GEM_DEV_SUITE:-_not_set_GEM_DEV_SUITE_not_set} ]] ; then
   echo "ERROR: Development suite GEM_DEV_SUITE='${GEM_DEV_SUITE}' is no longer available or not set" 1>&2
   exit 1
fi
cd ${GEM_DEV_SUITE}


# Check for a valid experiment to copy
update_dev_exp(){
   exp=${1}
   src=${2}
   expname=${3:-${exp##*/}}
   if [[ -d ${src}/configs ]] ; then
      update_dev_exp1 ${exp} ${src} ${expname}
   elif [[ -f ${src}/gem_settings.nml && -f ${src}/configexp.cfg ]] ; then
      update_dev_exp2 ${exp} ${src} ${expname}
   elif [[ -f ${src}/cfg_0000/gem_settings.nml && -f ${src}/cfg_0000/configexp.cfg ]] ; then
      update_dev_exp2 ${exp} ${src}/cfg_0000 ${expname}
   else
      echo "ERROR: No valid config found at ${src}" 1>&2
      exit 1
   fi
}

update_dev_exp_file() {
   expfile=${1}
   exp_cfg=${2}
   tmpfile="${TMPDIR}/${expfile##*/}$$"
   cat ${expfile} | \
         sed "s|GEM_ovbin=.*$|GEM_ovbin=\${GEM_DEV_SUITE:-${GEM_DEV_SUITE}}/gem/BINMOD|" | \
         sed "s|__OVBIN__|\${GEM_DEV_SUITE:-${SEQ_EXP_HOME}/..}/gem/BINMOD|" | \
         sed "s|__ATM_MODEL_DFILES__|${ATM_MODEL_DFILES}|" | \
         sed "s|GEM_version=.*$|GEM_version=${ATM_MODEL_BNDL#*GEM/}|" | \
         sed "s|__GEM_VERSION__|${ATM_MODEL_BNDL#*GEM/}|" \
      > ${tmpfile}
   mv -f ${tmpfile} ${expfile}
 }

update_dev_exp1(){
   exp=${1}
   src=${2}
   expname=${3:-${exp##*/}}
   exp_cfg=${exp}/configs
   src_cfg=${src}/configs
   mkdir -p ${exp_cfg}
   cp -L ${src}/experiment.cfg ${exp}
   cp -L ${src_cfg}/* ${exp_cfg}
   rpy.nml_set -f ${exp_cfg}/gem_settings.nml gem_cfgs/Out3_etik_s=\"${expname}\"
   if [[ -d ${GEM_DEV_SUITE}/gem && -f ${exp}/experiment.cfg ]] ; then
      expfile="$(true_path ${exp}/experiment.cfg)"
      update_dev_exp_file ${expfile} ${exp_cfg}
  fi
   #TODO: warn if GEM_xfer is not writable

   rm -fr ${exp}/resources
   cp -Lr ${src}/resources ${exp}
}


update_dev_exp2(){
   exp=${1}
   src=${2}
   expname=${3:-${exp##*/}}

   exp_cfg=${exp}/configs
   src_cfg=${src}

   mkdir -p ${exp_cfg}
   cp -L ${src_cfg}/* ${exp_cfg}/
   cp -L ${src_cfg}/configexp.cfg ${exp}/experiment.cfg

   rpy.nml_set -f ${exp_cfg}/gem_settings.nml gem_cfgs/Out3_etik_s=\"${expname}\"

   if [[ -d ${GEM_DEV_SUITE}/gem && -f ${exp}/experiment.cfg ]] ; then
      expfile="$(true_path ${exp}/experiment.cfg)"
      update_dev_exp_file ${expfile} ${exp_cfg}
   fi
   #TODO: warn if GEM_xfer is not writable

   rm -fr ${exp}/resources
   if [[ -d ${src}/resources ]] ; then
      cp -Lr ${src}/resources ${exp}
   elif [[ -d ${GEM_DEV_SUITE}/base/resources ]] ; then
      cp -Lr ${GEM_DEV_SUITE}/base/resources ${exp}
   elif [[ -d ${MAESTRO_CURRENT_REF}/ref/resources ]] ; then
      cp -Lr ${MAESTRO_CURRENT_REF}/ref/resources ${exp}
   else
      echo "ERROR: Cannot find any resources from ${src}, \${GEM_DEV_SUITE}/base, \${MAESTRO_CURRENT_REF}/ref" 1>&2
      exit 1
   fi
}


link_back() {
   exp=${1}
   expname=${2:-${exp##*/}}
   expname2=${3:-GEM_cfg_${expname}}
   exp_cfg_l=${exp}/configs
   exp_cfg_d=${GEM_DEV_SUITE}/gem/${expname2}/cfg_0000
   if [[ -d ${exp_cfg_d} && x"${expname2}" != x"GEM_cfg_${expname}" ]] ; then
      exp_cfg_d=${GEM_DEV_SUITE}/gem/GEM_cfg_${expname}/cfg_0000
   fi

   if [[ x"$f" != x"0" ]] ; then
      rm -rf ${exp_cfg_d}
   fi
   if [[ -d ${exp_cfg_d} ]] ; then
      echo "ERROR: existing dir (use -f to overwrite): ${exp_cfg_d}" 1>&2
      exit 1
   fi
   mkdir -p ${exp_cfg_d}
   cp -L ${exp_cfg_l}/* ${exp_cfg_d}
   cp -L ${exp}/experiment.cfg ${exp_cfg_d}/configexp.cfg

   rm -f ${exp_cfg_l}/* ${exp}/experiment.cfg
   if [[ ${i} == 1 ]] ; then
      cfgfile=${exp_cfg_d}/configexp.cfg
      tmpfile1="${cfgfile}-$$"
      mv ${cfgfile} ${tmpfile1}
      cat ${tmpfile1} | \
         sed "s|EXP_CONFIG_DIR=.*$|EXP_CONFIG_DIR=\${EXP_CONFIG_DIR:-${exp_cfg_d}}|" \
         > ${cfgfile}
      rm -f ${tmpfile1}
   else
      ln -s ${exp_cfg_d}/* ${exp_cfg_l}/
      ln -s ${exp_cfg_d}/configexp.cfg ${exp}/experiment.cfg
   fi
}

copy_exp=${GEM_DEV_SUITE}/${copy}
if [[ ! -d ${copy_exp} ]] ; then
   copy_exp_full=${GEM_DEV_SUITE}/gem/share/cfgs/${copy}
   if [[ ! -d ${copy_exp_full} ]] ; then
      copy_exp_full=${gem}/share/cfgs/${copy}
   fi
   if [[ ! -d ${copy_exp_full} ]] ; then
      copy_exp_full=${copy}
   fi
   if [[ ! -d ${copy_exp_full} ]] ; then
      echo "ERROR: Cannot copy configuration from ${copy_exp} or ${copy_exp_full} or \${gem}/share/cfgs/${copy}" 1>&2
      exit 1
   fi
   copy_exp=${copy_exp_full}
fi

# Create the requested maestro experiments
for expname in ${explist} ; do
   expname0=${expname}
   if [[ ${i} == 1 ]] ; then expname=${expname}-$$ ; fi

   exp=${GEM_DEV_SUITE}/${expname}
   exp_cfg=${exp}/configs

   rh_prefix=$(echo ${GEM_DEV_SUITE} | rev | cut -d '/' -f 1-3 | rev)/$(basename ${expname})
   if [[ ${v} -gt 0 ]] ; then
      gemimport ${expname} -hub_prefix=${rh_prefix} -f=${f} -tests=${tests} -v
   else
      gemimport ${expname} -hub_prefix=${rh_prefix} -f=${f} -tests=${tests} >/dev/null 2>&1
   fi
   if [[ $? -ne 0 ]] ; then
      echo "ERROR: problem encountered during Maestro import\n" 1>&2
      exit 1
   fi

   # Update the installation
   if [[ ${tests} -lt 1 ]] ; then
      update_dev_exp ${GEM_DEV_SUITE}/${expname} ${copy_exp} ${expname0}
      if [[ x"${ln}" != x"0" && -d ${GEM_DEV_SUITE}/gem ]] ; then
         if [[ x"${ln}" == x"1" ]] ; then
            link_back ${exp} ${expname0}
         else
            link_back ${exp} ${expname0} ${ln}
         fi
      fi
   else
      update_dev_exp_file ${GEM_DEV_SUITE}/${expname}/experiment.cfg ${exp_cfg}
   fi

   if [[ ${i} == 1 ]] ; then
      rm -rf ${exp}
   fi
done

# Update the suite description file
update_suite_desc
