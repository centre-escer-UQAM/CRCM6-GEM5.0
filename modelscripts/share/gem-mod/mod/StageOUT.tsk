#!/bin/ksh

printf "\n=====>  StageOUT.tsk starts: `date` ###########\n\n"

nthreads=$(nodeinfo -n ${SEQ_NODE} | grep node.cpu= | cut -d '=' -f 2)
nthreads=${nthreads##*x}
if [ $nthreads -lt 1 ] ; then nthreads=1 ; fi

abort_prefix=abort_StageOUT_

#target=$(r.read_link ${TASK_OUTPUT}/remote_location)
target=$(readlink ${TASK_OUTPUT}/remote_location)
dst_mach=$(echo ${target} | cut -d":" -f1)
dst_dir=$( echo ${target} | cut -d":" -f2)/${DOMAIN}
ssh ${dst_mach} mkdir -p ${dst_dir}

count=0 ; DOMAIN_number=$SLICE_start
while [ $DOMAIN_number -le $SLICE_end ] ; do

  count=$(( count + 1 ))
  bname=cfg_$DOMAIN_number
  listing=Um_output_${DOMAIN_number}.lis
  ${TASK_BIN}/Um_download.ksh -src ${TASK_INPUT}/${bname}  \
        -dst_mach ${dst_mach} -dst_dir ${dst_dir}          \
        -abortf ${abort_prefix}${bname} 1> ${listing} 2>&1 &

  DOMAIN_number=$((DOMAIN_number+1))
  if [[ $count -eq $nthreads ]]; then
    date ; wait ; date
    count=0
  fi
done
date ; wait ; date

# Check for aborted functions
touch liste_abort
find . -name "${abort_prefix}*" > liste_abort
if [[ $(cat liste_abort | wc -l) -gt 0 ]] ; then
  echo "ERROR: One or more download function calls aborted"
  for i in $(cat liste_abort) ; do
    file=$(echo ${i##*abort_StageOUT_cfg_} | sed 's/_[0-9]*$//')
    cat Um_output_${file}.lis
  done
  exit 1
fi

if [ -h ${TASK_INPUT}/Model_npass ] ; then
  scp $(readlink ${TASK_INPUT}/Model_npass) ${target}
fi

# Launch child npass task
if [[ ${SEQ_XFER} != "stop" ]] ; then
   echo "$SEQ_LOOP_EXT" | grep "\^last" && last=^last || last=
   if [[ -n "$SEQ_CONTAINER_LOOP_ARGS" ]]; then
      $SEQ_BIN/maestro -n $SEQ_CONTAINER/Sortie -s submit ${SEQ_CONTAINER_LOOP_ARGS},Sortie=${StageOUT}${last} -f ${SEQ_XFER}
   else
      $SEQ_BIN/maestro -n $SEQ_CONTAINER/Sortie -s submit -l Sortie=${StageOUT}${last} -f ${SEQ_XFER}
   fi
fi

printf "\n=====>  StageOUT.tsk ends: `date` ###########\n\n"
