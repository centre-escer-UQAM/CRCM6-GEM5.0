#!/bin/ksh
#

. .rdebase.inc.dot

DESC='Create dir and links for RPN Code Dev Env'
USAGE="USAGE: ${MYSELF} [-v] [-f]"

usage_long() {
	 toto=$(echo -e $USAGE)
	 more <<EOF
$DESC

$toto

Options:
    -h, --help         : print this help
    -v, --verbose      : verbose mode
    -f, --force        : force update links

EOF
}

myforce=0
while [[ $# -gt 0 ]] ; do
   case $1 in
      (-h|--help) usage_long; exit 0;;
      (-v|--verbose) ((verbose=verbose+1));;
      (-f|--force) myforce=1;;
      (*) if [[ x$1 != x ]] ; then myerror "Option Not recognized: $1";fi;;
    esac
    shift
done

STORAGE=${CONST_STORAGE}
BUILD=${CONST_BUILD}
if [[ $verbose -gt 0 ]] ; then
   echo STORAGE=$STORAGE
   echo BUILD=$BUILD
fi

if [[ -z "${STORAGE}" ]] ; then
   myerror "Storage var not defined, check your \$storage_model var: $storage_model"
fi

# if [[ $verbose -gt 0 ]] ; then
#    set -x
# fi

myecho 1 "+ mkdir -p $STORAGE  ## STORAGE"
mkdir -p $STORAGE
touch $STORAGE/.restricted
if [[ $myforce == 1 ]] ; then 
   rm -rf $BUILD
fi
if [[ ! -e $BUILD ]] ; then
   myecho 1 "+ ln -s $STORAGE $BUILD  ## BUILD -> STORAGE"
   ln -s $STORAGE $BUILD
fi

for item in $(set | grep CONST_BUILD | grep -v CONST_BUILD=| cut -d= -f1) ; do
   mydir="$(eval echo \$$(echo $item))"  #TODO: use ${!item}
   if [[ -z "$mydir" ]] ; then
      myerror "Var not defined: rdevar $item"
   fi
   myecho 1 "+ mkdir -p $mydir  ## ${item#CONST_}"
   mkdir -p $mydir
   if [[ ! -d $mydir ]] ; then
      myerror "Problem creating dir for $item: $mydir"
   fi
done

myecho 1 "+ mkdir ${CONST_EXTRADIRS:-/dev/null}  ## EXTRADIRS"
for item in ${CONST_EXTRADIRS}; do
   mkdir -p ${item} 2>/dev/null
   touch ${item}/.restricted
   here=$(pwd)
   if [[ ${item} == bin || ${item} == lib ]] ; then
      cd ${item}
      dest=../$CONST_BUILDLIB
      [[ ${item} == bin ]] && dest=../$CONST_BUILDBIN || true
      if [[ -d ${dest} ]] ; then
         rm -f ${CONST_RDE_BASE_ARCH:-$ORDENV_PLAT}
         ln -s ${dest} ${CONST_RDE_BASE_ARCH:-$ORDENV_PLAT}
      fi
      cd ${here}
   fi
done

for item in $RDE_BASE_MAKEFILES ; do
   if [[ -f $item && $myforce == 1 ]] ; then
      myecho 1 "+ rm -f ${item}"
      rm -f $item
   fi
   if [[ ! -e $item ]] ; then
      myecho 1 "+ ln -sf ${RDE_INCLUDE%/}/$item $item"
      ln -sf $RDE_INCLUDE/$item $item
   fi
   if [[ -f mes_recettes ]] ; then
      if [[ ! -f  Makefile.user.mk || $myforce == 1 ]] ; then
         myecho 1 "+ mv Makefile.user.mk Makefile.user.mk-bk-$$"
         myecho 1 "+ ln -sf mes_recettes Makefile.user.mk"
         mv Makefile.user.mk Makefile.user.mk-bk-$$
         ln -sf mes_recettes Makefile.user.mk
      fi
   fi
done
for item in Makefile.user.mk Makefile.user.root.mk ; do
   if [[ ! -e ${item} ]] ; then
      myecho 1 "+ cp ${RDE_INCLUDE}/${item} ."
      cp ${RDE_INCLUDE}/${item} .
   fi
done

RDE_CONFIG_FILE=${CONST_RDE_CONFIG_FILE}
RDE_ARCH=${CONST_RDE_ARCH}
RDE_LINKED_ARCH_LIST="${CONST_RDE_LINKED_ARCH_LIST}"
_found=0
for item in $RDE_LINKED_ARCH_LIST ; do
   if [[ x$item == x$RDE_ARCH ]] ; then
      _found=1
   fi
done
if [[ $_found == 0 ]] ; then
   myecho 1 "+ Adding $RDE_ARCH to $RDE_CONFIG_FILE"
   cat >> $RDE_CONFIG_FILE <<EOF
RDE_LINKED_ARCH_LIST="\$RDE_LINKED_ARCH_LIST $RDE_ARCH"
EOF
   rm -f ${CONST_MAKEFILE_CONST_WILD}
fi


myecho 1 "+ Linking source topdirs in ${CONST_RDE_LINKDIR}/"
mkdir -p ${CONST_RDE_LINKDIR}
for item in ${CONST_SRCPATH_TOPDIRS} ; do
   item2="$(true_path ${item} 2>/dev/null)"
   item2=${item2:-${item}}
   [[ $myforce == 1 ]] && rm -f ${CONST_RDE_LINKDIR}/${item##*/} || true
   if [[ ! -e ${CONST_RDE_LINKDIR}/${item##*/} ]] ; then
      ln -s ${item2} ${CONST_RDE_LINKDIR}/${item##*/} 2>/dev/null || true
   elif [[ "x$(true_path ${CONST_RDE_LINKDIR}/${item##*/})" != "x$(true_path ${item2})" ]] ; then
      myecho 1 "WARNING: link not updated ${CONST_RDE_LINKDIR}/${item##*/}"
   fi
done

#TODO: create/update .setenv.dot to reload rde/model?


